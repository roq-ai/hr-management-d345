generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model candidate {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String         @db.VarChar(255)
  profile_search_id String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  profile_search    profile_search @relation(fields: [profile_search_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile_search profile_search[]
}

model profile_search {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  search_name         String       @db.VarChar(255)
  category            String       @db.VarChar(255)
  description         String       @db.VarChar(255)
  requirements        String       @db.VarChar(255)
  person_in_charge    String       @db.VarChar(255)
  address             String       @db.VarChar(255)
  position_level      String       @db.VarChar(255)
  location            String       @db.VarChar(255)
  start_date          DateTime     @db.Date
  available_vacancies Int
  closing_date        DateTime     @db.Date
  organization_id     String       @db.Uuid
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime     @default(now()) @db.Timestamp(6)
  candidate           candidate[]
  organization        organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vacancy             vacancy[]
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}

model vacancy {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vacancy_name      String         @db.VarChar(255)
  profile_search_id String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  profile_search    profile_search @relation(fields: [profile_search_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
